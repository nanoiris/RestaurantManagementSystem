@page "/item/edit/{categoryId}/{itemId}"

@using RmsApp.Services
@using RmsApp.Dtos
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.Extensions.Logging
@inject ILogger<ItemService> logger
@inject IFlashMessageService FlashMessageService
@inject AuthService authService

<PageTitle>Item Edit</PageTitle>

<ul class="breadcrumb breadcrumb-gray">
    @foreach (var path in Paths)
    {
        <li class="breadcrumb-item"><NavLink href="@path.Path">@path.Title</NavLink></li>
    }
    <li class="breadcrumb-item active">Edit Item</li>
</ul>

@if (!string.IsNullOrEmpty(FlashMessageService.SuccessMessage))
    {
        <div class="alert alert-success">
            @FlashMessageService.SuccessMessage
        </div>
    }
else if (!string.IsNullOrEmpty(FlashMessageService.FailureMessage))
    {
        <div class="alert alert-danger">
            @FlashMessageService.FailureMessage
        </div>
    }

@if (Item != null)
{
    <form >
        <div class="form-group row mb-3">
            <label class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" @bind="@Item.Name" />
            </div>
        </div>

    <div class="form-group row mb-3">
        <label class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
        <textarea class="form-control" @bind="@Item.Description"></textarea>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-sm-2 col-form-label">Price</label>
        <div class="col-sm-10">
        <input type="number" class="form-control" @bind="@Item.Price" />
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-sm-2 col-form-label">Featured</label>
        <div class="col-sm-10">
        <input type="checkbox" @bind="@Item.IsFeatured" />
        </div>
    </div>

    <div class="form-group mb-3">
          <label >Choose Category</label>
          <select class="form-control" @bind="Item.CategoryId">
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
          </select>
        <span class="text-danger"></span>
       </div>

    <div class="form-group row mb-3">
        <label class="col-sm-2 col-form-label">Logo</label>
        <div class="col-sm-10">
              <InputFile class="form-control" OnChange="@OnFileChange" />
        @* <input type="file" OnChange="@OnFileChange"/> *@
        @* <img src="@Item.Logo" width="50px" height="50px" /> *@
         <img src="@(Item.Logo != null ? $"{Constants.imgUrl}/{Item.Logo}" : null)" width="100px" height="100px"/>
          @* <img src="@(Item.Logo != null ? $"http://fsd05rnv.eastus.cloudapp.azure.com:5000/img/share/{Item.Logo}" : null)" width="100px" height="100px"/> *@
        </div>
    </div>
    <button type="submit" class="btn btn-primary" @onclick:preventDefault="true" @onclick="UpdateItem">Save</button>
    <a class="btn btn-secondary" href="/item">Cancel</a>
    </form>
}
else
{
<p>Item not found.</p>
}

@code {

    [Parameter]
    public string categoryId { get; set; }
    [Parameter]
    public string itemId { get; set; }

    [Inject]
    public IItemService ItemService { get; set; }
    [Inject]
    public ICategoryService CategoryService { get; set; }

    public List<TabPath> Paths = new List<TabPath>
{
    new TabPath { Title = "Home", Path = "/" },
    new TabPath { Title = "Item", Path = "/Item" },
    new TabPath { Title = "Edit", Path = "/Item/Edit/{categoryId}/{itemId}" },
};
    public ItemEditDto Item { get; set; }
    public string restaurantId = Constants.RestaurantId; 


    public List<CategoryDto> Categories = new List<CategoryDto>();
    private IBrowserFile UploadImg { get; set; }
     private async Task ClearMessageAsync()
    {
        logger.LogInformation("clearing");
        await FlashMessageService.ClearMessagesAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("Item edit OnInitializedAsync");
        Item = await ItemService.GetItemAsync(categoryId, itemId);
        Categories = await CategoryService.ListCategoryAsync(restaurantId);
         
    }
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        UploadImg = e.File;
    }

    private async Task UpdateItem()
    {
        var newEditItem = new ItemEditDto
        { 
            Id = Item.Id,
            Name = Item.Name,
            Description = Item.Description,
            Price = Item.Price,
            IsFeatured = Item.IsFeatured,
            CategoryId = Item.CategoryId,
            UploadImg = UploadImg
        }; 
        
        if (UploadImg != null)
        {
            var imgContent = new StreamContent(UploadImg.OpenReadStream());
            imgContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(UploadImg.ContentType);
        }
        logger.LogInformation("newEditItem is " + newEditItem.Name + " "+ newEditItem.Description + newEditItem.Price +newEditItem.IsFeatured + UploadImg); 
        await ItemService.UpdateItemAsync(newEditItem);
        FlashMessageService.SetSuccessMessage("Edit successfully!");
        NavigationManager.NavigateTo("/item");
        await ClearMessageAsync();
    }


}
